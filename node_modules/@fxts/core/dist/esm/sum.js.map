{"version":3,"file":"sum.js","sourceRoot":"","sources":["../../src/sum.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAChE,OAAO,GAAG,MAAM,OAAO,CAAC;AACxB,OAAO,MAAM,MAAM,UAAU,CAAC;AAmB9B,4DAA4D;AAC5D,SAAS,GAAG,CACV,QAAW;IAEX,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;QAC3B,OAAO,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;KAChC;SAAM,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE;QAC/B,OAAO,MAAM,CAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;KACjE;SAAM,IAAI,eAAe,CAAC,QAAQ,CAAC,EAAE;QACpC,OAAO,MAAM,CAAiB,GAAG,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;KAClE;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,eAAe,GAAG,CAAC","sourcesContent":["import { isAsyncIterable, isIterable } from \"./_internal/utils\";\nimport add from \"./add\";\nimport reduce from \"./reduce\";\n\n/**\n * Adds all the elements of a Iterable/AsyncIterable.\n *\n * @example\n * ```ts\n * sum([]); // 0\n * sum([1, 2, 3, 4]); // 10\n * await sum(toAsync([1, 2, 3, 4])); // 10\n * ```\n */\nfunction sum<A extends Iterable<number> | AsyncIterable<number>>(\n  iterable: A,\n): A extends Iterable<number>\n  ? number\n  : A extends AsyncIterable<number>\n  ? Promise<number>\n  : never;\n// TODO The signature and implementation type are different.\nfunction sum<A extends Iterable<number> | AsyncIterable<number>>(\n  iterable: A,\n): number | Promise<number> {\n  if (Array.isArray(iterable)) {\n    return iterable.reduce(add, 0);\n  } else if (isIterable(iterable)) {\n    return reduce<number, number>((a, b) => add(a, b), 0, iterable);\n  } else if (isAsyncIterable(iterable)) {\n    return reduce<number, number>(add, Promise.resolve(0), iterable);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default sum;\n"]}