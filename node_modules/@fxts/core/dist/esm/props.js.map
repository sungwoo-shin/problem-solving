{"version":3,"file":"props.js","sourceRoot":"","sources":["../../src/props.ts"],"names":[],"mappings":"AA+CA,SAAS,KAAK,CAAqB,IAAO,EAAE,GAAO;IACjD,IAAI,GAAG,KAAK,IAAI;QAAE,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAChE,IAAI,GAAG,KAAK,SAAS;QAAE,OAAO,CAAI,GAAM,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAE9D,MAAM,MAAM,GAAG,EAAE,CAAC;IAElB,KAAK,MAAM,GAAG,IAAI,IAAI;QAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAc,CAAC,CAAC,CAAC;IAEzD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,eAAe,KAAK,CAAC","sourcesContent":["import type Key from \"./types/Key\";\n\ntype PropsTuple<K extends readonly Key[], T> = {\n  -readonly [I in keyof K]: T extends null\n    ? undefined\n    : K[I] extends keyof T\n    ? T[K[I]]\n    : undefined;\n};\n\ntype PropsReturnType<\n  K extends readonly Key[],\n  T,\n> = undefined[] extends PropsTuple<K, T>\n  ? keyof T extends K[keyof K]\n    ? (NonNullable<T>[keyof NonNullable<T>] | undefined)[]\n    : undefined[]\n  : PropsTuple<K, T>;\n\n/**\n * Returns an array containing the values of the specified props in the given object.\n *\n * @example\n * ```ts\n * // get the `name` and `age` properties from an object\n * const person = { name: \"John\", age: 30, address: \"123 Main St\" };\n * const [name, age, phone] = props([\"name\", \"age\", \"phone\"], person); // [\"John\", 30, undefined]\n *\n * // with pipe\n * pipe(\n *  person,\n *  props([\"name\", \"age\", \"phone\"]),\n * );\n *\n * // get the `address` and `phone` properties from an object that may be null or undefined\n * const maybePerson = null;\n * const [address, phone] = props([\"address\", \"phone\"], maybePerson); // [undefined, undefined]\n * ```\n */\nfunction props<K extends readonly Key[], T>(\n  key: K,\n  obj: T,\n): PropsReturnType<K, T>;\nfunction props<K extends readonly Key[]>(\n  key: K,\n): <T>(obj: T) => PropsReturnType<K, T>;\n\nfunction props<K extends Key[], T>(keys: K, obj?: T) {\n  if (obj === null) return new Array(keys.length).fill(undefined);\n  if (obj === undefined) return <T>(obj: T) => props(keys, obj);\n\n  const result = [];\n\n  for (const key of keys) result.push(obj[key as keyof T]);\n\n  return result;\n}\n\nexport default props;\n"]}