function memoize(f, resolver) {
    const memoized = (...args) => {
        const key = typeof resolver === "function" ? resolver(...args) : args[0];
        const _self = memoized;
        if (_self.cache === undefined) {
            _self.cache =
                key != null && typeof key === "object" ? new WeakMap() : new Map();
        }
        const { cache } = _self;
        if (!(cache instanceof WeakMap || cache instanceof Map)) {
            throw new TypeError("`cache` should only use `WeakMap`, `Map`");
        }
        if (cache.has(key)) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            return cache.get(key);
        }
        const result = f(...args);
        cache.set(key, result);
        return result;
    };
    return memoized;
}
export default memoize;
//# sourceMappingURL=memoize.js.map