import { isAsyncIterable, isIterable } from "./_internal/utils.js";
import identity from "./identity.js";
import map from "./Lazy/map.js";
import takeUntil from "./Lazy/takeUntil.js";
import pipe from "./pipe.js";
import reduce from "./reduce.js";
function some(f, iterable) {
    if (iterable === undefined) {
        return (iterable) => {
            return some(f, iterable);
        };
    }
    if (isIterable(iterable)) {
        return pipe(map(f, iterable), takeUntil(identity), (acc) => reduce((a, b) => a || b, false, acc), Boolean);
    }
    if (isAsyncIterable(iterable)) {
        return pipe(map(f, iterable), takeUntil(identity), (acc) => reduce((a, b) => a || b, false, acc), Boolean);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default some;
//# sourceMappingURL=some.js.map