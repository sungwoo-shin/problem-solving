{"version":3,"file":"Curry.js","sourceRoot":"","sources":["../../../src/types/Curry.ts"],"names":[],"mappings":"","sourcesContent":["import type Cast from \"./Cast\";\nimport type Drop from \"./Drop\";\nimport type Length from \"./Length\";\n\ntype CleanGaps<O extends any[]> = {\n  [K in keyof O]: NonNullable<O[K]>;\n};\n\ntype Gaps<L extends any[]> = Cast<CleanGaps<{ [K in keyof L]?: L[K] }>, any[]>;\n\ntype Curry<F extends (...args: any[]) => any> = <\n  T extends any[],\n  G = Drop<Length<T>, Parameters<F>>,\n>(\n  ...args: Cast<T, Gaps<Parameters<F>>>\n) => G extends [any, ...any[]]\n  ? Curry<(...args: G) => ReturnType<F>>\n  : ReturnType<F>;\n\nexport default Curry;\n"]}