import { isAsyncIterable, isIterable } from "./_internal/utils.js";
import isString from "./isString.js";
import reduce from "./reduce.js";
function sync(sep, iterable) {
    const res = reduce((a, b) => (a == "" ? `${b}` : `${a}${sep}${b}`), "", iterable);
    if (res == null) {
        return "";
    }
    return isString(res) ? res : String(res);
}
function async(sep, iterable) {
    return reduce((a, b) => (a == "" ? `${b}` : `${a}${sep}${b}`), "", iterable).then((res) => {
        if (res == null) {
            return "";
        }
        return isString(res) ? res : String(res);
    });
}
function join(sep, iterable) {
    if (iterable === undefined) {
        return (iterable) => {
            return join(sep, iterable);
        };
    }
    if (Array.isArray(iterable) && iterable.length === 0)
        return "";
    if (isIterable(iterable)) {
        return sync(sep, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(sep, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default join;
//# sourceMappingURL=join.js.map