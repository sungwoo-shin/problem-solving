"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var utils_1 = require("./_internal/utils");
var range_1 = tslib_1.__importDefault(require("./Lazy/range"));
function sync(iterable, n) {
    var e_1, _a;
    var iterator = iterable[Symbol.iterator]();
    try {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        for (var _b = tslib_1.__values((0, range_1.default)(0, n)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _ = _c.value;
            if (iterator.next().done) {
                return;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
function async(iterable, n) {
    var _a, e_2, _b, _c;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var iterator, _d, _e, _f, _, e_2_1;
        return tslib_1.__generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    iterator = iterable[Symbol.asyncIterator]();
                    _g.label = 1;
                case 1:
                    _g.trys.push([1, 7, 8, 13]);
                    _d = true, _e = tslib_1.__asyncValues((0, range_1.default)(0, n));
                    _g.label = 2;
                case 2: return [4 /*yield*/, _e.next()];
                case 3:
                    if (!(_f = _g.sent(), _a = _f.done, !_a)) return [3 /*break*/, 6];
                    _c = _f.value;
                    _d = false;
                    _ = _c;
                    return [4 /*yield*/, iterator.next()];
                case 4:
                    if ((_g.sent()).done) {
                        return [2 /*return*/];
                    }
                    _g.label = 5;
                case 5:
                    _d = true;
                    return [3 /*break*/, 2];
                case 6: return [3 /*break*/, 13];
                case 7:
                    e_2_1 = _g.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 13];
                case 8:
                    _g.trys.push([8, , 11, 12]);
                    if (!(!_d && !_a && (_b = _e.return))) return [3 /*break*/, 10];
                    return [4 /*yield*/, _b.call(_e)];
                case 9:
                    _g.sent();
                    _g.label = 10;
                case 10: return [3 /*break*/, 12];
                case 11:
                    if (e_2) throw e_2.error;
                    return [7 /*endfinally*/];
                case 12: return [7 /*endfinally*/];
                case 13: return [2 /*return*/];
            }
        });
    });
}
function consume(iterable, n) {
    if (n === void 0) { n = Infinity; }
    if ((0, utils_1.isIterable)(iterable)) {
        return sync(iterable, n);
    }
    if ((0, utils_1.isAsyncIterable)(iterable)) {
        return async(iterable, n);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
exports.default = consume;
//# sourceMappingURL=consume.js.map