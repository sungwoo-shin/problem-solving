{"version":3,"file":"negate.js","sourceRoot":"","sources":["../../src/negate.ts"],"names":[],"mappings":";;AAgBA,SAAS,MAAM,CAAO,SAAgC;IACpD,OAAO,UAAC,KAAQ,IAA6B,OAAA,CAAC,SAAS,CAAC,KAAK,CAAC,EAAjB,CAAiB,CAAC;AACjE,CAAC;AAED,kBAAe,MAAM,CAAC","sourcesContent":["/**\n * Create a function that returns the opposite result of a predicate function\n *\n * @example\n * ```ts\n * const isDefined: (input: string | undefined) => input is string = negate(isUndefined)<string | undefined>\n *\n * const isDefined: (input: unknown) => boolean = negate((input) => input === undefined)\n * ```\n */\nfunction negate<T, N extends T>(\n  predicate: (input: T) => input is N,\n): (input: T) => input is Exclude<T, N>;\n\nfunction negate<T>(predicate: (input: T) => boolean): (input: T) => boolean;\n\nfunction negate<T, N>(predicate: (input: T) => unknown) {\n  return (input: T): input is Exclude<T, N> => !predicate(input);\n}\n\nexport default negate;\n"]}