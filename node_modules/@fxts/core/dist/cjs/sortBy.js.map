{"version":3,"file":"sortBy.js","sourceRoot":"","sources":["../../src/sortBy.ts"],"names":[],"mappings":";;;AAAA,2CAAgE;AAChE,8DAAgC;AAChC,wDAA0B;AA4B1B,SAAS,MAAM,CACb,CAAmC,EACnC,QAAY;IAKZ,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,OAAO,UAAC,QAAW;YACjB,OAAA,MAAM,CAAC,CAAC,EAAE,QAAe,CAA2C;QAApE,CAAoE,CAAC;KACxE;IAED,IAAM,OAAO,GAAG,UAAC,CAAmB,EAAE,CAAmB;QACvD,IAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAW,CAAC;QAC1B,IAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAW,CAAC;QAC1B,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC;IAEF,IAAI,IAAA,iBAAO,EAAC,QAAQ,CAAC,EAAE;QACrB,OAAQ,QAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACxC;IAED,IAAI,IAAA,kBAAU,EAAC,QAAQ,CAAC,EAAE;QACxB,OAAO,IAAA,cAAI,EAAC,OAAO,EAAE,QAAsC,CAAC,CAAC;KAC9D;IAED,IAAI,IAAA,uBAAe,EAAC,QAAQ,CAAC,EAAE;QAC7B,OAAO,IAAA,cAAI,EAAC,OAAO,EAAE,QAA2C,CAAC,CAAC;KACnE;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,kBAAe,MAAM,CAAC","sourcesContent":["import { isAsyncIterable, isIterable } from \"./_internal/utils\";\nimport isArray from \"./isArray\";\nimport sort from \"./sort\";\nimport type IterableInfer from \"./types/IterableInfer\";\nimport type ReturnValueType from \"./types/ReturnValueType\";\n\n/**\n * Returns an array which sorted according to the `f`.\n *\n * @example\n * ```ts\n * sortBy(a => a, [3, 4, 1, 2, 5, 2]);\n * // [1, 2, 2, 3, 4, 5]\n * sortBy((a) => a.id, [{id:4,name:'foo'}, {id:2,name:'bar'},{id:3, name:'lee'}]);\n * // [{id:2,name:'bar'}, {id:3, name:'lee'}, {id:4,name:'foo'}]\n * ```\n */\nfunction sortBy(f: (a: any) => unknown, iterable: readonly []): any[];\n\nfunction sortBy<T>(f: (a: T) => unknown, iterable: Iterable<T>): T[];\n\nfunction sortBy<T>(\n  f: (a: T) => unknown,\n  iterable: AsyncIterable<T>,\n): Promise<T[]>;\n\nfunction sortBy<T extends Iterable<unknown> | AsyncIterable<unknown>>(\n  f: (a: IterableInfer<T>) => unknown,\n): (iterable: T) => ReturnValueType<T, IterableInfer<T>[]>;\n\nfunction sortBy<T extends Iterable<unknown> | AsyncIterable<unknown>>(\n  f: (a: IterableInfer<T>) => unknown,\n  iterable?: T,\n):\n  | IterableInfer<T>[]\n  | Promise<IterableInfer<T>[]>\n  | ((iterable: T) => ReturnValueType<T, IterableInfer<T>[]>) {\n  if (iterable === undefined) {\n    return (iterable: T) =>\n      sortBy(f, iterable as any) as ReturnValueType<T, IterableInfer<T>[]>;\n  }\n\n  const _sortBy = (a: IterableInfer<T>, b: IterableInfer<T>) => {\n    const aa = f(a) as number;\n    const bb = f(b) as number;\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  };\n\n  if (isArray(iterable)) {\n    return (iterable as any).sort(_sortBy);\n  }\n\n  if (isIterable(iterable)) {\n    return sort(_sortBy, iterable as Iterable<IterableInfer<T>>);\n  }\n\n  if (isAsyncIterable(iterable)) {\n    return sort(_sortBy, iterable as AsyncIterable<IterableInfer<T>>);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default sortBy;\n"]}