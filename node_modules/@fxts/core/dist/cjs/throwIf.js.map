{"version":3,"file":"throwIf.js","sourceRoot":"","sources":["../../src/throwIf.ts"],"names":[],"mappings":";;;AAAA,gEAAkC;AA8BlC,SAAS,OAAO,CACd,SAAgC,EAChC,GAA2C;IAA3C,oBAAA,EAAA,MAAmC,kBAAQ;IAE3C,OAAO,UAAC,KAAQ;QACd,IAAI,SAAS,CAAC,KAAK,CAAC;YAAE,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC;QACvC,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;AACJ,CAAC;AACD,kBAAe,OAAO,CAAC","sourcesContent":["import identity from \"./identity\";\n\n/**\n * throw return of `err` if predicate function return true\n *\n * default throw function is {@link https://fxts.dev/docs/identity | identity }\n *\n * @example\n * ```ts\n *  pipe(\n *    fn(), // return type is string | undefined\n *\n *    throwIf(isUndefined, (err) => Error(\"return of fn() is undefined\")),\n *    // err is undefined, and it is return of fn\n *\n *    (input) => input, // input is string\n *  )\n * ```\n */\n\nfunction throwIf<T, N extends T>(\n  predicate: (input: T) => input is N,\n  err?: (input: N) => unknown,\n): (input: T) => Exclude<T, N>;\n\nfunction throwIf<T>(\n  predicate: (input: T) => boolean,\n  err?: (input: T) => unknown,\n): (input: T) => T;\n\nfunction throwIf<T>(\n  predicate: (input: T) => boolean,\n  err: (input: unknown) => unknown = identity,\n) {\n  return (input: T) => {\n    if (predicate(input)) throw err(input);\n    return input;\n  };\n}\nexport default throwIf;\n"]}