{"version":3,"file":"ReturnPipeType.js","sourceRoot":"","sources":["../../../src/types/ReturnPipeType.ts"],"names":[],"mappings":"","sourcesContent":["import type Awaited from \"./Awaited\";\nimport type { TuplifyUnion } from \"./ExcludeObject\";\nimport type Head from \"./Head\";\nimport type Tail from \"./Tail\";\n\ntype HasPromise<T extends any[]> = Head<T> extends never\n  ? false\n  : Head<T> extends Promise<unknown>\n  ? true\n  : T[\"length\"] extends 0\n  ? false\n  : HasPromise<Tail<T>>;\n\ntype PossiblyHasPromise<T extends any[]> = Head<T> extends never\n  ? false\n  : HasPromise<TuplifyUnion<Head<T>>> extends true\n  ? true\n  : T[\"length\"] extends 0\n  ? false\n  : PossiblyHasPromise<Tail<T>>;\n\ntype PipeLast<T extends any[]> = T[\"length\"] extends 0\n  ? undefined\n  : T[\"length\"] extends 1\n  ? Head<T>\n  : Awaited<T[1]> extends never\n  ? never\n  : PipeLast<Tail<T>>;\n\ntype ReturnPipeType<\n  T extends any[],\n  R = Awaited<PipeLast<T>>,\n> = HasPromise<T> extends true\n  ? Promise<R>\n  : PossiblyHasPromise<T> extends true\n  ? Promise<R> | R\n  : R;\n\nexport default ReturnPipeType;\n"]}