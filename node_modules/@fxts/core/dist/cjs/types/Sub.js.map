{"version":3,"file":"Sub.js","sourceRoot":"","sources":["../../../src/types/Sub.ts"],"names":[],"mappings":"","sourcesContent":["import type Cast from \"./Cast\";\nimport type { _IsNegative } from \"./IsNegative\";\nimport type Iteration from \"./Iteration/Iteration\";\nimport type IterationOf from \"./Iteration/IterationOf\";\nimport type Next from \"./Iteration/Next\";\nimport type Pos from \"./Iteration/Pos\";\nimport type Prev from \"./Iteration/Prev\";\n\n/**\n * from ts-toolbelt repository\n * https://github.com/millsp/ts-toolbelt\n */\n\n/**\n * @hidden\n */\ntype _SubPositive<N1 extends Iteration, N2 extends Iteration> = {\n  0: _SubPositive<Prev<N1>, Prev<N2>>; // N1 = -/+, N2 = +\n  1: N1;\n  2: number;\n}[Pos<N2> extends 0 // If successful\n  ? 1\n  : number extends Pos<N2> // If un-success\n  ? 2\n  : 0]; // Or continue\n\n/**\n * @hidden\n */\ntype SubPositive<N1 extends Iteration, N2 extends Iteration> = _SubPositive<\n  N1,\n  N2\n> extends infer X\n  ? Cast<X, Iteration>\n  : never;\n\n/**\n * @hidden\n */\ntype _SubNegative<N1 extends Iteration, N2 extends Iteration> = {\n  0: _SubNegative<Next<N1>, Next<N2>>; // N1 = -/+, N2 = -\n  1: N1;\n  2: number;\n}[Pos<N2> extends 0 // If successful\n  ? 1\n  : number extends Pos<N2> // If un-success\n  ? 2\n  : 0]; // Or continue\n\n/**\n * @hidden\n */\ntype SubNegative<N1 extends Iteration, N2 extends Iteration> = _SubNegative<\n  N1,\n  N2\n> extends infer X\n  ? Cast<X, Iteration>\n  : never;\n\n/**\n * @hidden\n */\nexport type _Sub<N1 extends Iteration, N2 extends Iteration> = {\n  0: SubPositive<N1, N2>;\n  1: SubNegative<N1, N2>;\n}[_IsNegative<N2>];\n\n/**\n * Subtract a [[Number]] from another one\n * @param N1 Left-hand side\n * @param N2 Right-hand side\n * @returns `string | number | boolean`\n * @example\n * ```ts\n * type test0 = Sub<'2', '10'>        // '-8'\n * type test1 = Sub<'0', '40'>        // '-40'\n * type test2 = Sub<'0', '40', 's'>   // '-40'\n * type test3 = Sub<'0', '40', 'n'>   //  -40\n * type test4 = Sub<'-20', '40', 's'> // string\n * type test5 = Sub<'-20', '40', 'n'> // number\n * ```\n */\ntype Sub<N1 extends number, N2 extends number> = N1 extends unknown\n  ? N2 extends unknown\n    ? _Sub<IterationOf<N1>, IterationOf<N2>>[0]\n    : never\n  : never;\n\nexport default Sub;\n"]}