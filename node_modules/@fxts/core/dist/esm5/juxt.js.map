{"version":3,"file":"juxt.js","sourceRoot":"","sources":["../../src/juxt.ts"],"names":[],"mappings":";AA2EA;;;;;;;;;;;;;;;;;;;;;GAqBG;AAEH,SAAS,IAAI,CACX,EAAoB;IAEpB,OAAO;QAAC,cAAqB;aAArB,UAAqB,EAArB,qBAAqB,EAArB,IAAqB;YAArB,yBAAqB;;QAC3B,OAAA,EAAE,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,wCAAK,IAAY,YAAlB,CAAmB,CAAwB;IAAzD,CAAyD,CAAC;AAC9D,CAAC;AAED,eAAe,IAAI,CAAC","sourcesContent":["import type Append from \"./types/Append\";\nimport type Arrow from \"./types/Arrow\";\nimport type Cast from \"./types/Cast\";\nimport type Head from \"./types/Head\";\nimport type Tail from \"./types/Tail\";\n\n/*\n * HeadEach<[[1,2,3], [4,5,6], [7,8,9]]> => [1, 4, 7]\n */\ntype HeadEach<T extends any[][], R extends any[] = []> = T extends [\n  any[],\n  ...any,\n]\n  ? HeadEach<Cast<Tail<T>, any[][]>, Append<R, Head<T[0]>>>\n  : R;\n\n/*\n * TailEach<[[1,2,3], [4,5,6], [7,8,9]]> => [[2,3], [5,6], [8,9]]\n */\ntype TailEach<T extends any[][], R extends any[] = []> = T extends [\n  any[],\n  ...any,\n]\n  ? TailEach<Cast<Tail<T>, any[][]>, Append<R, Tail<T[0]>>>\n  : R;\n\n/*\n * Zip<[[1, 2, 3], ['a', 'b'], [true, false, true]]> => [[1, 'a', true], [2, 'b', false], [3, never, true]]\n */\ntype Zip<T extends any[][], R extends any[] = []> = T[number] extends []\n  ? R\n  : Zip<TailEach<T>, Append<R, HeadEach<T>>>;\n\n/*\n * Sum<[{a: 1}, {b: 2}, {c: 3}]> => {a: 1, b: 2, c: 3}\n */\ntype Sum<T extends any[], R = T[0]> = T extends [any, ...any]\n  ? Sum<Tail<T>, R & T[0]>\n  : R;\n\n/*\n * SumEach<[[1, 2], ['a', 'b'], [true, false]]> => [1 & 2, 'a' & 'b', true & false]\n */\ntype SumEach<A extends any[][], R extends any[] = []> = A extends [\n  any[],\n  ...any,\n]\n  ? SumEach<Cast<Tail<A>, any[][]>, Append<R, Sum<Head<A>>>>\n  : R;\n\n/*\n * ParamTuples<[\n *   (a: number, b: string) => any,\n *   (a: string, b: number) => any\n * ]> => [[number, string], [string, number]]\n */\ntype ParamTuples<\n  FS extends Array<Arrow>,\n  Tuples extends any[] = [],\n> = FS extends [Arrow, ...Array<Arrow>]\n  ? ParamTuples<Cast<Tail<FS>, Array<Arrow>>, Append<Tuples, Parameters<FS[0]>>>\n  : Tuples;\n\ntype JuxtArgs<\n  FS extends Array<Arrow>,\n  ARGS extends any[] = ParamTuples<FS>,\n> = Cast<ARGS[0] extends Sum<ARGS> ? ARGS[0] : SumEach<Zip<ARGS>>, any[]>;\n\ntype JuxtReturnTypes<\n  FS extends Array<Arrow>,\n  R extends any[] = [],\n> = FS extends [Arrow, ...Array<Arrow>]\n  ? JuxtReturnTypes<Cast<Tail<FS>, Array<Arrow>>, Append<R, ReturnType<FS[0]>>>\n  : R;\n\n/**\n * `juxt` applies a list of functions to a list of values.\n *\n * @example\n * ```ts\n * const range = juxt([Math.min, Math.max])(1, 2, 3, 4); // [1, 4]\n *\n * // with pipe\n * const entries = (obj: { a: number; b: number }) =>\n *   pipe(\n *     [Object.keys, Object.values] as const,\n *     juxt,\n *     (f) => f(obj),\n *     apply(zip),\n *     toArray,\n *   );\n *\n * entries({ a: 1, b: 2 }); // [ [\"a\", 1], [\"b\", 2] ]\n * ```\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/apply | apply}\n */\n\nfunction juxt<FS extends Array<Arrow>>(\n  fs: readonly [...FS],\n): (...args: JuxtArgs<FS>) => JuxtReturnTypes<FS> {\n  return (...args: JuxtArgs<FS>) =>\n    fs.map((f) => f(...(args as any))) as JuxtReturnTypes<FS>;\n}\n\nexport default juxt;\n"]}