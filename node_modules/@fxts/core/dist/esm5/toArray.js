import { __asyncValues, __awaiter, __generator } from "tslib";
import { isAsyncIterable, isIterable } from "./_internal/utils.js";
function async(iterable) {
    var _a, iterable_1, iterable_1_1;
    var _b, e_1, _c, _d;
    return __awaiter(this, void 0, void 0, function () {
        var res, item, e_1_1;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    res = [];
                    _e.label = 1;
                case 1:
                    _e.trys.push([1, 6, 7, 12]);
                    _a = true, iterable_1 = __asyncValues(iterable);
                    _e.label = 2;
                case 2: return [4 /*yield*/, iterable_1.next()];
                case 3:
                    if (!(iterable_1_1 = _e.sent(), _b = iterable_1_1.done, !_b)) return [3 /*break*/, 5];
                    _d = iterable_1_1.value;
                    _a = false;
                    item = _d;
                    res.push(item);
                    _e.label = 4;
                case 4:
                    _a = true;
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 12];
                case 6:
                    e_1_1 = _e.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 12];
                case 7:
                    _e.trys.push([7, , 10, 11]);
                    if (!(!_a && !_b && (_c = iterable_1.return))) return [3 /*break*/, 9];
                    return [4 /*yield*/, _c.call(iterable_1)];
                case 8:
                    _e.sent();
                    _e.label = 9;
                case 9: return [3 /*break*/, 11];
                case 10:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 11: return [7 /*endfinally*/];
                case 12: return [2 /*return*/, res];
            }
        });
    });
}
function toArray(iter) {
    if (isAsyncIterable(iter)) {
        return async(iter);
    }
    else if (isIterable(iter)) {
        return Array.from(iter);
    }
    else {
        return [];
    }
}
export default toArray;
//# sourceMappingURL=toArray.js.map