{"version":3,"file":"average.js","sourceRoot":"","sources":["../../src/average.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAChE,OAAO,IAAI,MAAM,aAAa,CAAC;AAC/B,OAAO,IAAI,MAAM,QAAQ,CAAC;AAC1B,OAAO,GAAG,MAAM,OAAO,CAAC;AAGxB;;;;;;;;;;;;;;;;;GAiBG;AACH,SAAS,OAAO,CACd,QAAW;IAEX,IAAI,IAAI,GAAG,CAAC,CAAC;IAEb,IAAI,UAAU,CAAS,QAAQ,CAAC,EAAE;QAChC,OAAO,IAAI,CACT,QAAQ,EACR,IAAI,CAAC,cAAM,OAAA,IAAI,EAAE,EAAN,CAAM,CAAC,EAClB,GAAG,EACH,UAAC,CAAC,IAAK,OAAA,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,EAA7B,CAA6B,CACf,CAAC;KACzB;IAED,IAAI,eAAe,CAAS,QAAQ,CAAC,EAAE;QACrC,OAAO,IAAI,CACT,QAAQ,EACR,IAAI,CAAC,cAAM,OAAA,IAAI,EAAE,EAAN,CAAM,CAAC,EAClB,GAAG,EACH,UAAC,CAAC,IAAK,OAAA,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,EAA7B,CAA6B,CACf,CAAC;KACzB;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,eAAe,OAAO,CAAC","sourcesContent":["import { isAsyncIterable, isIterable } from \"./_internal/utils\";\nimport peek from \"./Lazy/peek\";\nimport pipe from \"./pipe\";\nimport sum from \"./sum\";\nimport type ReturnValueType from \"./types/ReturnValueType\";\n\n/**\n * Returns the average of the given (Iterable/AsyncIterable) (mean)\n *\n * @example\n * ```ts\n * average([]); // NaN\n * average([1, 2, 3, 4, 5]); // 3\n * await average(toAsync([1, 2, 3, 4, 5])); // 3\n *\n * // with pipe\n * pipe(\n *  [1, 2, 3, 4, 5],\n *  average,\n * ); // 3\n * ```\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}\n */\nfunction average<T extends Iterable<number> | AsyncIterable<number>>(\n  iterable: T,\n): ReturnValueType<T> {\n  let size = 0;\n\n  if (isIterable<number>(iterable)) {\n    return pipe(\n      iterable,\n      peek(() => size++),\n      sum,\n      (a) => (size === 0 ? NaN : a / size),\n    ) as ReturnValueType<T>;\n  }\n\n  if (isAsyncIterable<number>(iterable)) {\n    return pipe(\n      iterable,\n      peek(() => size++),\n      sum,\n      (a) => (size === 0 ? NaN : a / size),\n    ) as ReturnValueType<T>;\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default average;\n"]}