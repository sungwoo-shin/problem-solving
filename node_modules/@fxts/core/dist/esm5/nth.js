import { __asyncValues, __awaiter, __generator, __values } from "tslib";
import { isAsyncIterable, isIterable } from "./_internal/utils.js";
function sync(index, iterable) {
    var e_1, _a;
    var idx = 0;
    try {
        for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
            var item = iterable_1_1.value;
            if (idx++ === index) {
                return item;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
function async(index, iterable) {
    var _a, iterable_2, iterable_2_1;
    var _b, e_2, _c, _d;
    return __awaiter(this, void 0, void 0, function () {
        var idx, item, e_2_1;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    idx = 0;
                    _e.label = 1;
                case 1:
                    _e.trys.push([1, 6, 7, 12]);
                    _a = true, iterable_2 = __asyncValues(iterable);
                    _e.label = 2;
                case 2: return [4 /*yield*/, iterable_2.next()];
                case 3:
                    if (!(iterable_2_1 = _e.sent(), _b = iterable_2_1.done, !_b)) return [3 /*break*/, 5];
                    _d = iterable_2_1.value;
                    _a = false;
                    item = _d;
                    if (idx++ === index) {
                        return [2 /*return*/, item];
                    }
                    _e.label = 4;
                case 4:
                    _a = true;
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 12];
                case 6:
                    e_2_1 = _e.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 12];
                case 7:
                    _e.trys.push([7, , 10, 11]);
                    if (!(!_a && !_b && (_c = iterable_2.return))) return [3 /*break*/, 9];
                    return [4 /*yield*/, _c.call(iterable_2)];
                case 8:
                    _e.sent();
                    _e.label = 9;
                case 9: return [3 /*break*/, 11];
                case 10:
                    if (e_2) throw e_2.error;
                    return [7 /*endfinally*/];
                case 11: return [7 /*endfinally*/];
                case 12: return [2 /*return*/];
            }
        });
    });
}
function nth(index, iterable) {
    if (iterable === undefined) {
        return function (iterable) {
            return nth(index, iterable);
        };
    }
    if (index < 0) {
        throw new RangeError("'index' must be over 0");
    }
    if (isIterable(iterable)) {
        return sync(index, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(index, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default nth;
//# sourceMappingURL=nth.js.map