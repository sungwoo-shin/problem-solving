{"version":3,"file":"prop.js","sourceRoot":"","sources":["../../src/prop.ts"],"names":[],"mappings":"AA+BA,SAAS,IAAI,CAAmB,GAAM,EAAE,GAAO;IAC7C,IAAI,GAAG,KAAK,IAAI;QAAE,OAAO,SAAS,CAAC;IACnC,IAAI,GAAG,KAAK,SAAS;QAAE,OAAO,UAAI,GAAM,IAAK,OAAA,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAd,CAAc,CAAC;IAE5D,OAAO,GAAG,CAAC,GAAyB,CAAC,CAAC;AACxC,CAAC;AAED,eAAe,IAAI,CAAC","sourcesContent":["import type Key from \"./types/Key\";\n\ntype Prop<T, K extends Key> = T extends null\n  ? undefined\n  : K extends keyof T\n  ? T[K]\n  : undefined;\n\n/**\n * Get the value of a property from an object, or return undefined if the property does not exist on the object.\n *\n * @example\n * ```ts\n * // get the `name` property from an object\n * const person = { name: \"John\", age: 30 };\n * const name = prop(\"name\", person); // \"John\"\n *\n * // with pipe\n * pipe(\n *  person,\n *  prop(\"name\"),\n * );\n *\n * // get the `address` property from an object that may be null or undefined\n * const maybePerson = null;\n * const address = prop(\"address\", maybePerson); // undefined\n * ```\n */\nfunction prop<K extends Key, T>(key: K, obj: T): Prop<T, K>;\nfunction prop<K extends Key>(key: K): <T>(obj: T) => Prop<T, K>;\n\nfunction prop<K extends Key, T>(key: K, obj?: T) {\n  if (obj === null) return undefined;\n  if (obj === undefined) return <T>(obj: T) => prop(key, obj);\n\n  return obj[key as unknown as keyof T];\n}\n\nexport default prop;\n"]}