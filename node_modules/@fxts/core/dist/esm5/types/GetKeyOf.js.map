{"version":3,"file":"GetKeyOf.js","sourceRoot":"","sources":["../../../src/types/GetKeyOf.ts"],"names":[],"mappings":";AA2BA;;GAEG","sourcesContent":["import type { TuplifyUnion } from \"./ExcludeObject\";\n\ntype IsSubtype<A, B> = A extends B ? (B extends A ? false : true) : false;\n\ntype IsUnionKey<T> = IsSubtype<T, string> extends true\n  ? true\n  : IsSubtype<T, number> extends true\n  ? true\n  : IsSubtype<T, symbol> extends true\n  ? true\n  : false;\n\nexport type GetKeyOf<\n  T extends object,\n  V extends T[keyof T],\n  R = Exclude<\n    {\n      [K in keyof T]: V extends T[K]\n        ? IsUnionKey<T[K]> extends true\n          ? K\n          : never\n        : never;\n    }[keyof T],\n    never\n  >,\n> = TuplifyUnion<R>[\"length\"] extends 1 ? R : never;\n\n/*\n * type Test = GetKeyOf<{a: 1, b: 2}, 1> // a\n */\n"]}