import { isAsyncIterable, isIterable } from "./_internal/utils.js";
import map from "./Lazy/map.js";
import takeUntil from "./Lazy/takeUntil.js";
import not from "./not.js";
import pipe from "./pipe.js";
import reduce from "./reduce.js";
function every(f, iterable) {
    if (iterable === undefined) {
        return function (iterable) {
            return every(f, iterable);
        };
    }
    if (isIterable(iterable)) {
        return pipe(map(f, iterable), takeUntil(not), function (acc) {
            return reduce(function (a, b) { return a && b; }, true, acc);
        }, function (a) { return a !== null && a !== void 0 ? a : true; }, Boolean);
    }
    if (isAsyncIterable(iterable)) {
        return pipe(map(f, iterable), takeUntil(not), function (acc) {
            return reduce(function (a, b) { return a && b; }, true, acc);
        }, function (a) { return a !== null && a !== void 0 ? a : true; }, Boolean);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default every;
//# sourceMappingURL=every.js.map