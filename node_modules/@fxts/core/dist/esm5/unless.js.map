{"version":3,"file":"unless.js","sourceRoot":"","sources":["../../src/unless.ts"],"names":[],"mappings":"AA2BA,SAAS,MAAM,CAAC,SAAc,EAAE,OAAY;IAC1C,OAAO,UAAC,KAAU,IAAK,OAAA,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAA3C,CAA2C,CAAC;AACrE,CAAC;AAED,eAAe,MAAM,CAAC","sourcesContent":["/**\n *\n * If the result of `predicate` is true, `process` will not be executed.\n * `unless` return the result of `process` if it is executed,\n *  and if the `process` is not executed, it returns the function argument as is.\n *\n * @example\n * ```ts\n * // it will return only string\n * const unlessIsString: (input: string | undefined) => string = unless(isString, (input) => {\n *    throw Error(\"input is undefiend.\")\n * });\n * ```\n *\n * @param predicate determines whether to execute `process`\n * @return original input or result of `process`\n */\nfunction unless<T, N extends T, U>(\n  predicate: (input: T) => input is N,\n  process: (input: Exclude<T, N>) => U,\n): (input: T) => N | (U extends void ? undefined : U);\n\nfunction unless<T, U>(\n  predicate: (input: T) => boolean,\n  process: (input: T) => U,\n): (input: T) => T | (U extends void ? undefined : U);\n\nfunction unless(predicate: any, process: any) {\n  return (input: any) => (predicate(input) ? input : process(input));\n}\n\nexport default unless;\n"]}